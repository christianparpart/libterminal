# This is a **quick** style analysis job that's meaningful to run for
# every commit whatsoever, just like the continuous build.
name: Checks

on:
  push:
    paths-ignore:
    - '.github/ISSUE_TEMPLATE/**'
    - 'LICENSE.txt'
    branches:
    - master
  pull_request:
    branches:
    - master

concurrency:
  group: checks-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check_common:
    name: "Check CI scripts"
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v3
    - name: "Checking for common errors in build, deployment, and CI."
      run: ./scripts/check-common.sh

  check_PR_TODOs:
    name: "Check PR-TODOs"
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
    - name: "Checking for open PR-related TODO items"
      run: ./scripts/check-pr-todos.sh

  editorconfig:
    name: "Check editorconfig"
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: editorconfig-checker/action-editorconfig-checker@main
      - run: editorconfig-checker

  check_clang_format:
    name: "Check C++ style"
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
    - name: Run clang-format style check for C/C++/Protobuf programs.
      uses: jidicula/clang-format-action@v4.9.0
      with:
        clang-format-version: '15'
        check-path: 'src'
        #exclude-regex: 'sse2neon.h'

  clang_tidy:
    name: "Clang-Tidy verifying checks"
    runs-on: ubuntu-22.04
    steps:
      - name: "Check out repository"
        uses: actions/checkout@v3
      - name: Installing xmllint for ci-set-vars
        run: sudo apt -qy install libxml2-utils
      - name: "Set variables for Contour build-like CI"
        id: set_vars
        run: ./scripts/ci-set-vars.sh
        env:
          REPOSITORY: "${{ github.event.repository.name }}"
      - name: "Install build dependencies"
        # Note: Keep this in sync with that in build.yml!
        run: sudo ./scripts/install-deps.sh
      - name: "Post-fix embedded dependency permissions."
        run: sudo find _deps/sources -exec chown $UID {} \;
      - name: "Prepare building Contour"
        # Note: Keep this in sync with that in build.yml!
        run: |
          BUILD_DIR="Build" \
            CMAKE_BUILD_TYPE="Debug" \
            CXX="g++-11" \
            ./scripts/ci-prepare-contour.sh

      - name: "Execute Clang-Tidy"
        uses: whisperity/codechecker-analysis-action@v1
        id: codechecker
        continue-on-error: true
        with:
          # CodeChecker version. This currently misreports as an 'rc' but is
          # in fact not an RC...
          version: '6.21.0'
          llvm-version: '15'

          config: .github/codechecker/config-verify.json

          build-command: "cd Build && cmake --build . -- -j3"

      - name: "Upload HTML reports"
        uses: actions/upload-artifact@v3
        with:
          name: "contour-${{ steps.set_vars.outputs.VERSION_STRING }}-codechecker-${{ steps.codechecker.outputs.codechecker-version }}+${{ steps.codechecker.outputs.codechecker-hash }}-llvm-${{ steps.codechecker.outputs.llvm-version }}-results"
          path: "${{ steps.codechecker.outputs.result-html-dir }}"
          if-no-files-found: error
      - name: "Upload analysis failure reproducers"
        uses: actions/upload-artifact@v3
        with:
          name: "contour-${{ steps.set_vars.outputs.VERSION_STRING }}-codechecker-${{ steps.codechecker.outputs.codechecker-version }}+${{ steps.codechecker.outputs.codechecker-hash }}-llvm-${{ steps.codechecker.outputs.llvm-version }}-failure-zips"
          path: "${{ steps.codechecker.outputs.analyze-output }}/failed"
          if-no-files-found: ignore

      - name: "Break build if CodeChecker reported any findings"
        if: ${{ steps.codechecker.outputs.warnings == 'true' }}
        run: |
          echo "::error title=Clang-Tidy::Style and code health verification checks reported."
          exit 1
