# vim:et:ts=2:sw=2

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
    branches:
      - 'release*'
      - 'prerelease*'
      - 'prerelease'
      - 'testing' # for public testing
      - 'gh-actions' # only for testing

name: Create Release

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

# TODO:
# [ ] run tests on each build (as last check before creating release)
# [ ] label package files with "prerelease" if they're not a release

jobs:
  build_windows:
    name: Build on Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: setup environment
        shell: powershell
        id: set_vars
        run: .\scripts\ci-set-vars.ps1
        env:
          REPOSITORY: ${{ github.event.repository.name }}
      - name: "Fetch embedded dependencies"
        shell: powershell
        run: |
          ./scripts/install-deps.ps1
          type ./_deps/sources/CMakeLists.txt
      - name: "vcpkg: Install dependencies"
        uses: lukka/run-vcpkg@v5
        id: runvcpkg
        with:
          vcpkgArguments: angle catch2 freetype fontconfig harfbuzz fmt yaml-cpp range-v3
          vcpkgDirectory: ${{ runner.workspace }}/vcpkg/
          vcpkgGitCommitId: af2287382b1991dbdcb7e5112d236f3323b9dd7a
          vcpkgTriplet: x64-windows
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: ${{ runner.os }}-QtCache
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
      - name: "create build directory"
        run: mkdir build
      - name: "Generate build files"
        run: cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=20 -DCMAKE_TOOLCHAIN_FILE="${{ runner.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-windows -DLIBTERMINAL_TESTING=OFF -DLIBUNICODE_TESTING=OFF -B build .
      - name: "Build"
        run: cmake --build build/ --config Release
      - name: "Create Package(s)"
        run: cd build ; cpack
      - name: inspect
        run: Get-ChildItem -Recurse
      - name: "Rename packages"
        run: |
          mv "build\Contour-${{ steps.set_vars.outputs.version }}-win64.msi" "contour-${{ steps.set_vars.outputs.version }}-win64.msi"
          mv "build\Contour-${{ steps.set_vars.outputs.version }}-win64.zip" "contour-${{ steps.set_vars.outputs.version }}-win64.zip"
      - name: "Inspect again"
        run: Get-ChildItem
      - name: "Uploading MSI to artifact store"
        uses: actions/upload-artifact@v2
        with:
          path: contour-${{ steps.set_vars.outputs.version }}-win64.msi
          retention-days: 7
      - name: "Uploading ZIP to artifact store"
        uses: actions/upload-artifact@v2
        with:
          path: contour-${{ steps.set_vars.outputs.version }}-win64.zip
          retention-days: 7

  build_ubuntu1804:
    name: Build on Ubuntu 18.04
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: set variables
        id: set_vars
        run: ./scripts/ci-set-vars.sh
        env:
          REPOSITORY: ${{ github.event.repository.name }}
      - name: "install dependencies"
        run: |
          set -ex
          cat /etc/apt/sources.list
          sudo apt -q update
          sudo ./scripts/install-deps.sh
      - name: "create debian package"
        run: |
          set -ex
          INCR=1
          ./scripts/mkdebchangelog.sh "${{ steps.set_vars.outputs.version }}" ${INCR}
          VERSION="${{ steps.set_vars.outputs.version }}"
          sed -i -e "s/0.0.0-1/${VERSION}-${INCR}/g" debian/changelog
          dpkg-buildpackage -uc -us
          mkdir target
          mv ../contour*.* target/
      - name: "Rename files"
        run: |
          mv -v "target/contour_${{ steps.set_vars.outputs.version }}-1_amd64.deb" "contour_${{ steps.set_vars.outputs.version }}-ubuntu_18_04_amd64.deb"
          mv -v "target/contour-dbgsym_${{ steps.set_vars.outputs.version }}-1_amd64.ddeb" "contour-dbgsym_${{ steps.set_vars.outputs.version }}-ubuntu_18_04_amd64.ddeb"
      - name: "Uploading artifact .deb package"
        uses: actions/upload-artifact@v2
        with:
          path: contour_${{ steps.set_vars.outputs.version }}-ubuntu_18_04_amd64.deb
          if-no-files-found: error
          retention-days: 7
      - name: "Uploading artifact .ddeb package (debugging symbols)"
        uses: actions/upload-artifact@v2
        with:
          path: contour-dbgsym_${{ steps.set_vars.outputs.version }}-ubuntu_18_04_amd64.ddeb
          if-no-files-found: error
          retention-days: 7
      - name: "Attempt installing the created .deb"
        run: |
          sudo dpkg --install "contour_${{ steps.set_vars.outputs.version }}-ubuntu_18_04_amd64.deb"

  build_ubuntu2004:
    name: Build on Ubuntu 20.04
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: set variables
        id: set_vars
        run: ./scripts/ci-set-vars.sh
        env:
          REPOSITORY: ${{ github.event.repository.name }}
      - name: "install dependencies"
        run: |
          set -ex
          cat /etc/apt/sources.list
          sudo apt -q update
          sudo ./scripts/install-deps.sh
      - name: "create debian package"
        run: |
          set -ex
          INCR=1
          ./scripts/mkdebchangelog.sh "${{ steps.set_vars.outputs.version }}" ${INCR}
          VERSION="${{ steps.set_vars.outputs.version }}"
          sed -i -e "s/0.0.0-1/${VERSION}-${INCR}/g" debian/changelog
          dpkg-buildpackage -uc -us
          mkdir target
          mv ../contour*.* target/
      - name: "Rename files"
        run: |
          mv -v "target/contour_${{ steps.set_vars.outputs.version }}-1_amd64.deb" "contour_${{ steps.set_vars.outputs.version }}-ubuntu_20_04_amd64.deb"
          mv -v "target/contour-dbgsym_${{ steps.set_vars.outputs.version }}-1_amd64.ddeb" "contour-dbgsym_${{ steps.set_vars.outputs.version }}-ubuntu_20_04_amd64.ddeb"
      - name: "Uploading artifact .deb package"
        uses: actions/upload-artifact@v2
        with:
          path: contour_${{ steps.set_vars.outputs.version }}-ubuntu_20_04_amd64.deb
          retention-days: 7
      - name: "Uploading artifact .ddeb package (debugging symbols)"
        uses: actions/upload-artifact@v2
        with:
          path: contour-dbgsym_${{ steps.set_vars.outputs.version }}-ubuntu_20_04_amd64.ddeb
          retention-days: 7
      - name: "Attempt installing the created .deb"
        run: |
          sudo dpkg --install "contour_${{ steps.set_vars.outputs.version }}-ubuntu_20_04_amd64.deb"

  build_osx:
    name: Build on OS/X
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: set variables
        id: set_vars
        run: ./scripts/ci-set-vars.sh
        env:
          REPOSITORY: ${{ github.event.repository.name }}
      - name: "Install dependencies"
        run: |
          set -ex
          #brew update
          brew install freetype fontconfig qt5 harfbuzz boost pkg-config
      - name: "Create build directory"
        run: mkdir build
      - name: "Generate build files"
        run: |
          cmake . \
                -DCMAKE_BUILD_TYPE=RelWithDebInfo \
                -DQt5_DIR="$(brew --prefix qt5)/lib/cmake/Qt5" \
                -B build/
      - name: "Build"
        run: cmake --build build/
      - name: "test: libcrispy"
        run: ./build/src/crispy/crispy_test
      - name: "test: libterminal"
        run: ./build/src/terminal/terminal_test
      - name: inspect
        run: |
          find build/ -print
          echo "TODO: upload to artifact store"
      - name: "Create Package(s)"
        run: |
          set -ex
          cd build
          sudo cpack -G "DragNDrop;ZIP"
          ls -hl
          BASENAME="contour-${{ steps.set_vars.outputs.version }}-osx"
          mv -vf "Contour-${{ steps.set_vars.outputs.VERSION_STRING }}-Darwin.zip" "../${BASENAME}.zip"
          mv -vf "Contour-${{ steps.set_vars.outputs.VERSION_STRING }}-Darwin.dmg" "../${BASENAME}.dmg"
      - name: upload to artifact store (ZIP)
        uses: actions/upload-artifact@v2
        with:
          path: contour-${{ steps.set_vars.outputs.version }}-osx.zip
          retention-days: 7
      - name: upload to artifact store (DMG)
        uses: actions/upload-artifact@v2
        with:
          path: contour-${{ steps.set_vars.outputs.version }}-osx.dmg
          retention-days: 7

  build_archlinux:
    strategy:
      matrix:
        arch:
          [
              "linux/amd64 x86_64",
              "linux/arm64/v8 aarch64",
          ]
    name: "Archlinux ${{ matrix.arch }}"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
      - name: Read info
        id: tags
        shell: bash
        run: |
          arch="${{ matrix.arch }}"
          echo ::set-output name=PLATFORM::${arch%% *}
          echo ::set-output name=ARCH::${arch##* }
      - name: set environment variables
        id: set_vars
        run: ./scripts/ci-set-vars.sh
        env:
          REPOSITORY: ${{ github.event.repository.name }}
      - name: Build ${{ matrix.arch }} release
        shell: bash
        run: |
          docker buildx build --platform ${{ steps.tags.outputs.PLATFORM }} \
          --tag contour:${{ steps.tags.outputs.ARCH }} \
          -f .github/archlinux/Dockerfile \
          --load \
          .
          docker create --name contour-${{ steps.tags.outputs.ARCH }} contour:${{ steps.tags.outputs.ARCH }}
          docker cp contour-${{ steps.tags.outputs.ARCH }}:/app/contour.pkg.tar.zst contour-${{ steps.tags.outputs.ARCH }}.pkg.tar.zst
          docker container rm contour-${{ steps.tags.outputs.ARCH }}
          mv "contour-${{ steps.tags.outputs.ARCH }}.pkg.tar.zst" \
              contour_${{ steps.set_vars.outputs.version }}-archlinux_${{ steps.tags.outputs.ARCH }}
      - name: "Uploading Archlinux .pkg.tar.zst package"
        uses: actions/upload-artifact@v2
        with:
          path: contour_${{ steps.set_vars.outputs.version }}-archlinux_${{ steps.tags.outputs.ARCH }}
          if-no-files-found: error
          retention-days: 7

  build_fedora:
    strategy:
      matrix:
        arch:
          [
            "linux/amd64 x86_64"
          ]
    name: "Fedora ${{ matrix.arch }}"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
      with:
        version: latest
    - name: Read matrix info
      id: tags
      shell: bash
      run: |
        arch="${{ matrix.arch }}"
        echo ::set-output name=PLATFORM::${arch%% *}
        echo ::set-output name=ARCH::${arch##* }
    - name: set environment variables
      id: set_vars
      run: ./scripts/ci-set-vars.sh
      env:
        REPOSITORY: ${{ github.event.repository.name }}
    - name: prepare distfile
      run: |
        set -x
        PKGNAME="contour-${{ steps.set_vars.outputs.VERSION }}"
        DISTDIR="/tmp/dist/${PKGNAME}"
        mkdir -p ${DISTDIR}
        cp -rvp . ${DISTDIR}
        tar czpf ${PKGNAME}.tar.gz -C "/tmp/dist" .
    - name: Build ${{ matrix.arch }} release
      shell: bash
      run: |
        set -x
        ARCH="${{ steps.tags.outputs.ARCH }}"
        VERSION="${{ steps.set_vars.outputs.VERSION }}"
        docker buildx build --platform ${{ steps.tags.outputs.PLATFORM }} \
                --tag contour:${ARCH} \
                --build-arg VERSION=${VERSION} \
                --build-arg VERSION_STRING=${VERSION} \
                -f .github/fedora/Dockerfile \
                --load \
                .
        docker create --name contour-${ARCH} contour:${ARCH}
        docker cp contour-${ARCH}:/app/rpmbuild/RPMS/${ARCH}/contour-${VERSION}-1.fc35.${ARCH}.rpm \
                  contour-${VERSION}-1.fc35.${ARCH}.rpm
        docker cp contour-${ARCH}:/app/rpmbuild/RPMS/${ARCH}/contour-debuginfo-${VERSION}-1.fc35.${ARCH}.rpm \
                  contour-debuginfo-${VERSION}-1.fc35.${ARCH}.rpm
        docker cp contour-${ARCH}:/app/rpmbuild/RPMS/${ARCH}/contour-debugsource-${VERSION}-1.fc35.${ARCH}.rpm \
                  contour-debugsource-${VERSION}-1.fc35.${ARCH}.rpm
        docker container rm contour-${{ steps.tags.outputs.ARCH }}
        echo "pwd: `pwd`" && ls -hla
    - name: "Uploading Fedora RPM package"
      uses: actions/upload-artifact@v2
      with:
        path: "contour-${{ steps.set_vars.outputs.VERSION }}-1.fc35.${{ steps.tags.outputs.ARCH }}.rpm"
        if-no-files-found: error
        retention-days: 7
    - name: "Uploading Fedora RPM package (debuginfo)"
      uses: actions/upload-artifact@v2
      with:
        path: "contour-debuginfo-${{ steps.set_vars.outputs.VERSION }}-1.fc35.${{ steps.tags.outputs.ARCH }}.rpm"
        if-no-files-found: error
        retention-days: 7
    - name: "Uploading Fedora RPM package (debugsource)"
      uses: actions/upload-artifact@v2
      with:
        path: "contour-debugsource-${{ steps.set_vars.outputs.VERSION }}-1.fc35.${{ steps.tags.outputs.ARCH }}.rpm"
        if-no-files-found: error
        retention-days: 7

  do_release:
    name: Create Github release
    runs-on: ubuntu-latest
    needs: [build_ubuntu1804, build_ubuntu2004, build_windows, build_osx, build_archlinux, build_fedora]
    steps:
      - uses: actions/checkout@v2
      - name: set variables
        id: set_vars
        run: ./scripts/ci-set-vars.sh
        env:
          REPOSITORY: ${{ github.event.repository.name }}
      - name: fetch release artifacts
        uses: actions/download-artifact@v2
        with:
          name: artifact

      - name: "inspect"
        run: ls -lisahF
      - name: inspect recurse
        run: pwd; ls -hlaR

      # -------------------------------------------------------------
      - name: Create Github release page
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # token provided by Actions
        with:
          tag_name: v${{ steps.set_vars.outputs.version }}${{ steps.set_vars.outputs.tag_suffix}}
          release_name: contour ${{ steps.set_vars.outputs.version }} ${{ steps.set_vars.outputs.RELEASENAME_SUFFIX}}
          body: |
            ${{ steps.set_vars.outputs.RELEASEBODY }}
          draft: true
          prerelease: ${{ steps.set_vars.outputs.IS_PRERELEASE }}

      # -------------------------------------------------------------
      - name: Upload Ubuntu 18.04 package (.deb)
        id: upload-release-asset-deb
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./contour_${{ steps.set_vars.outputs.version }}-ubuntu_18_04_amd64.deb
          asset_name: contour_${{ steps.set_vars.outputs.version }}-ubuntu_18_04_amd64.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload Ubuntu 18.04 debug package (.ddeb)
        id: upload-release-asset-ddeb
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./contour-dbgsym_${{ steps.set_vars.outputs.version }}-ubuntu_18_04_amd64.ddeb
          asset_name: contour-dbgsym_${{ steps.set_vars.outputs.version }}-ubuntu_18_04_amd64.ddeb
          asset_content_type: application/vnd.debian.binary-package

      # -------------------------------------------------------------
      - name: Upload Ubuntu 20.04 package (.deb)
        id: upload-release-asset-deb-2004
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./contour_${{ steps.set_vars.outputs.version }}-ubuntu_20_04_amd64.deb
          asset_name: contour_${{ steps.set_vars.outputs.version }}-ubuntu_20_04_amd64.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload Ubuntu 20.04 debug package (.ddeb)
        id: upload-release-asset-ddeb-2004
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./contour-dbgsym_${{ steps.set_vars.outputs.version }}-ubuntu_20_04_amd64.ddeb
          asset_name: contour-dbgsym_${{ steps.set_vars.outputs.version }}-ubuntu_20_04_amd64.ddeb
          asset_content_type: application/vnd.debian.binary-package

      # -------------------------------------------------------------
      - name: Upload Archlinux package x86_64
        id: upload-release-asset-archlinux-x86_64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./contour_${{ steps.set_vars.outputs.version }}-archlinux_x86_64
          asset_name: contour_${{ steps.set_vars.outputs.version }}-archlinux_x86_64
          asset_content_type: application/x-zstd-compressed-tar

      - name: Upload Archlinux package aarch64
        id: upload-release-asset-archlinux-aarch64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./contour_${{ steps.set_vars.outputs.version }}-archlinux_aarch64
          asset_name: contour_${{ steps.set_vars.outputs.version }}-archlinux_aarch64
          asset_content_type: application/x-zstd-compressed-tar

      # -------------------------------------------------------------
      - name: Upload Fedora package x86_64
        id: upload-release-asset-fedora-x86_64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./contour-${{ steps.set_vars.outputs.VERSION }}-1.fc35.x86_64.rpm"
          asset_name: contour-${{ steps.set_vars.outputs.VERSION }}-1.fc35.x86_64.rpm
          asset_content_type: application/x-rpm

      # -------------------------------------------------------------
      - name: Upload Fedora (debuginfo) package x86_64
        id: upload-release-asset-fedora-debuginfo-x86_64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./contour-debuginfo-${{ steps.set_vars.outputs.VERSION }}-1.fc35.x86_64.rpm"
          asset_name: contour-debuginfo-${{ steps.set_vars.outputs.VERSION }}-1.fc35.x86_64.rpm
          asset_content_type: application/x-rpm

      # -------------------------------------------------------------
      - name: Upload Fedora (debugsource) package x86_64
        id: upload-release-asset-fedora-debugsource-x86_64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./contour-debugsource-${{ steps.set_vars.outputs.VERSION }}-1.fc35.x86_64.rpm"
          asset_name: contour-debugsource-${{ steps.set_vars.outputs.VERSION }}-1.fc35.x86_64.rpm
          asset_content_type: application/x-rpm

      # -------------------------------------------------------------
      - name: Upload Windows MSI package
        id: upload-release-msi-asset-winx64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./contour-${{ steps.set_vars.outputs.version }}-win64.msi
          asset_name: contour-${{ steps.set_vars.outputs.version }}-win64.msi
          asset_content_type: application/octet-stream

      # -------------------------------------------------------------
      - name: Upload Windows ZIP package
        id: upload-release-zip-asset-winx64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: contour-${{ steps.set_vars.outputs.version }}-win64.zip
          asset_name: contour-${{ steps.set_vars.outputs.version }}-win64.zip
          asset_content_type: application/zip

      # -------------------------------------------------------------
      - name: Upload OS/X ZIP package
        id: upload-release-asset-osx-zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: contour-${{ steps.set_vars.outputs.version }}-osx.zip
          asset_name: contour-${{ steps.set_vars.outputs.version }}-osx.zip
          asset_content_type: application/zip

      # -------------------------------------------------------------
      - name: Upload OS/X DMG package
        id: upload-release-asset-osx-dmg
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: contour-${{ steps.set_vars.outputs.version }}-osx.dmg
          asset_name: contour-${{ steps.set_vars.outputs.version }}-osx.dmg
          asset_content_type: application/x-apple-diskimage

