name: CodeChecker C++ Static Analysis

on:
  push:
    paths-ignore:
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/*.yml'
      - '*.md'
    branches:
      - master
      - codechecker
      - feature/**
      - fix/**
      - improvement/**
      - wip
  pull_request:
    branches:
      - master

jobs:
  ubuntu_2004:
    name: "Ubuntu Linux 20.04"
    runs-on: ubuntu-20.04
    env:
      CODECHECKER_CONFIG: .github/codechecker/config.json
    steps:
      - name: "Check out repository"
        uses: actions/checkout@v2
      - name: "Set Contour CI variables"
        id: set_vars
        run: ./scripts/ci-set-vars.sh
        env:
          REPOSITORY: "${{ github.event.repository.name }}"
      - name: "Install build dependencies"
        # Note: Keep this in sync with that in build.yml!
        run: |
          cat /etc/apt/sources.list
          sudo apt-get -qy update
          sudo ./scripts/install-deps.sh
      - name: "Check out repository Ericsson/CodeChecker"
        uses: actions/checkout@v2
        with:
          repository: Ericsson/CodeChecker
          path: CodeChecker
      - name: "Install analysis dependencies"
        id: anal_deps
        run: |
          export DISTRO_FANCYNAME="$(lsb_release -c | awk '{ print $2 }')"
          sudo apt-get -qy update
          sudo apt-get -y --no-install-recommends install \
            build-essential \
            curl            \
            gcc-multilib    \
            python3-dev     \
            python3-venv
          curl -sL http://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo add-apt-repository -y "deb http://apt.llvm.org/$DISTRO_FANCYNAME/ llvm-toolchain-$DISTRO_FANCYNAME main"
          # Get the largest Clang package number available.
          export LLVM_VER="$(apt-cache search --full 'clang-[[:digit:]]*$' | grep '^Package: clang' | cut -d ' ' -f 2 | sort -V | tail -n 1 | sed 's/clang-//')"
          sudo apt-get -y --no-install-recommends install \
            clang-$LLVM_VER      \
            clang-tidy-$LLVM_VER
          sudo update-alternatives --install                   \
            /usr/bin/clang clang /usr/bin/clang-$LLVM_VER 1000 \
            --slave                                            \
              /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-$LLVM_VER
          update-alternatives --query clang
          echo "::set-output name=LLVM_REAL_VERSION::$(clang --version | head -n 1 | cut -d' ' -f4-)"
      - name: "Build and Package CodeChecker"
        id: codechecker
        run: |
          cat "$CODECHECKER_CONFIG"
          pushd CodeChecker/analyzer
          make venv
          source venv/bin/activate
          make standalone_package
          deactivate
          echo "::set-output name=CODECHECKER_PATH::$(readlink -f ./build/CodeChecker/bin)"
          echo "::set-output name=CODECHECKER_VERSION::$(./build/CodeChecker/bin/CodeChecker analyzer-version | grep 'Base package' | cut -d'|' -f 2 | tr -d ' ')"
          echo "::set-output name=CODECHECKER_GITSEVEN::$(./build/CodeChecker/bin/CodeChecker analyzer-version | grep 'Git commit' | cut -d'|' -f 2 | cut -c 2-8)"
          popd
      - name: "Build Contour"
        # Note: Keep this in sync with that in build.yml!
        run: |
          BUILD_DIR="Build" \
            CMAKE_BUILD_TYPE="Debug" \
            CXX="g++-9" \
            ./scripts/ci-prepare-contour.sh
          pushd Build
          "${{ steps.codechecker.outputs.CODECHECKER_PATH }}"/CodeChecker \
            log \
            --build "cmake --build . -- -j3" \
            --output "../logged_compilation.json"
          popd
      - name: "Perform static analysis (non-CTU for normal development)"
        if: ${{ github.ref != 'refs/heads/master' || github.event_name == 'pull_request' }}
        run: |
          "${{ steps.codechecker.outputs.CODECHECKER_PATH }}"/CodeChecker \
            analyzers --detail
          "${{ steps.codechecker.outputs.CODECHECKER_PATH }}"/CodeChecker \
            analyze \
            "logged_compilation.json" \
            --config "$CODECHECKER_CONFIG" \
            --jobs $(nproc) \
            --output "Results" \
          || true
      - name: "Perform static analysis (CTU for pushes on master)"
        if: ${{ github.ref == 'refs/heads/master' && github.event_name == 'push' }}
        run: |
          "${{ steps.codechecker.outputs.CODECHECKER_PATH }}"/CodeChecker \
            analyzers --detail
          "${{ steps.codechecker.outputs.CODECHECKER_PATH }}"/CodeChecker \
            analyze \
            "logged_compilation.json" \
            --config "$CODECHECKER_CONFIG" \
            --jobs $(nproc) \
            --output "Results" \
            \
            --ctu \
            --ctu-ast-mode load-from-pch \
          || true
      - name: "Convert static analysis results to HTML"
        # Ignore the exit status of the parse command - the fact that we have
        # reports will be obvious from the arfect and the CI output.
        run: |
          "${{ steps.codechecker.outputs.CODECHECKER_PATH }}"/CodeChecker \
            parse \
            "Results" \
            --config "$CODECHECKER_CONFIG" \
            --export html \
            --output "Results-HTML" \
          || true
      - name: "Dump analysis results to CI log"
        # Ignore the exit status of the parse command - the fact that we have
        # reports will be obvious from the arfect and the CI output.
        run: |
          "${{ steps.codechecker.outputs.CODECHECKER_PATH }}"/CodeChecker \
            parse \
            "Results" \
            --config "$CODECHECKER_CONFIG" \
          || true
      - name: "Upload HTML results"
        uses: actions/upload-artifact@v2
        with:
          name: "contour-${{ steps.set_vars.outputs.VERSION_STRING }}-codechecker-${{ steps.codechecker.outputs.CODECHECKER_VERSION }}+${{ steps.codechecker.outputs.CODECHECKER_GITSEVEN }}-llvm-${{ steps.anal_deps.outputs.LLVM_REAL_VERSION }}-results"
          path: "Results-HTML"
          if-no-files-found: error
      - name: "Upload analysis failure collections"
        uses: actions/upload-artifact@v2
        with:
          name: "contour-${{ steps.set_vars.outputs.VERSION_STRING }}-codechecker-${{ steps.codechecker.outputs.CODECHECKER_VERSION }}+${{ steps.codechecker.outputs.CODECHECKER_GITSEVEN }}-llvm-${{ steps.anal_deps.outputs.LLVM_REAL_VERSION }}-failure-zips"
          path: "Results/failed"
          if-no-files-found: ignore
